@using System.Configuration
@using System.Data
@model DotNetReportModel

@using (Html.BeginScripts())
{
    if (Model.ReportType == "Line")
    {

        var xkey = "";
        var ykeys = "";
        var labels = "";
        var i = 0;
        var j = 0;

        <script type="text/javascript">

            Morris.Line({
                element: 'chart-div-@Html.Raw(Model.ReportId)',
                data: [
                            @foreach (DataRow dr in Model.ReportData.Rows)
                    {
                        @Html.Raw((i > 0 ? "," : "") + "{")
                        j=0;
                        foreach(DataColumn dc in Model.ReportData.Columns) {
                            if (j==0 || IsNumericType(dc)) {
                            @Html.Raw((j > 0 ? "," : "") + "'" + dc.ColumnName.Replace(" ", "_") + "': " +  GetLabelValue(dc, dr));

                            if (i == 0) {
                                if (j == 0) {
                                    xkey = dc.ColumnName.Replace(" ", "_");
                                }
                                else {
                                    ykeys +=  (ykeys !=""? ",": "") + "'" + dc.ColumnName.Replace(" ", "_") + "'";
                                    labels += (labels != "" ? "," : "") + "'" + dc.ColumnName + "'";
                                }
                            }
                            j++;
                            }
                        }
                        @Html.Raw("}")
                        i++;
                    }
                ],
                xkey: '@xkey',
                ykeys: [@Html.Raw(ykeys)],
                labels: [@Html.Raw(labels)]

            });
        </script>
    }

    if (Model.ReportType == "Bar")
    {

        var xkey = "";
        var ykeys = "";
        var labels = "";
        var i = 0;
        var j = 0;

        <script type="text/javascript">

            Morris.Bar({
                element: 'chart-div-@Html.Raw(Model.ReportId)',
                data: [
                            @foreach (DataRow dr in Model.ReportData.Rows)
                    {
                        @Html.Raw((i > 0 ? "," : "") + "{")
                        j=0;
                        foreach(DataColumn dc in Model.ReportData.Columns) {
                            if (j==0 || IsNumericType(dc)) {
                            @Html.Raw((j > 0 ? "," : "") + "'" + dc.ColumnName.Replace(" ", "_") + "': " +  GetLabelValue(dc, dr));

                            if (i == 0) {
                                if (j == 0) {
                                    xkey = dc.ColumnName.Replace(" ", "_");
                                }
                                else {
                                    ykeys +=  (ykeys !=""? ",": "") + "'" + dc.ColumnName.Replace(" ", "_") + "'";
                                    labels += (labels != "" ? "," : "") + "'" + dc.ColumnName + "'";
                                }
                            }
                            j++;
                            }
                        }
                        @Html.Raw("}")
                        i++;
                    }
                ],
                xkey: '@xkey',
                ykeys: [@Html.Raw(ykeys)],
                labels: [@Html.Raw(labels)],
                barRatio: 0.4,
                hideHover: 'auto',
                barColors: ['#E8852C', '#115588', '#4C443D', '#229955', '#3F7F5D', '#AA9988',
                    '#ADD8C1', '#DDBBCC', '#331800', '#002211'
                ]

            });
        </script>
    }
    if (Model.ReportType == "Pie")
    {

        var i = 0;
        var j = 0;

        <script type="text/javascript">

            Morris.Donut({
                element: 'chart-div-@Html.Raw(Model.ReportId)',
                data: [
                            @foreach (DataRow dr in Model.ReportData.Rows)
                    {
                        @Html.Raw((i > 0 ? "," : ""))

                            @Html.Raw("{label: '" + dr[0].ToString().Replace("'", "") + "', value: " + dr[1] + "}")

                        i++;
                    }
                ],
                colors: ['#E8852C', '#115588', '#4C443D', '#229955', '#3F7F5D', '#AA9988',
                    '#ADD8C1', '#DDBBCC', '#331800', '#002211'
                ]

            });
        </script>
    }
}

@functions {
    public static bool IsNumericType(DataColumn col)
    {

        switch (Type.GetTypeCode(col.DataType))
        {
            case TypeCode.Int16:
            case TypeCode.UInt16:
            case TypeCode.Int32:
            case TypeCode.UInt32:
            case TypeCode.Int64:
            case TypeCode.UInt64:
            case TypeCode.Single:
            case TypeCode.Double:
            case TypeCode.Decimal:
                return true;

            case TypeCode.Boolean:
            case TypeCode.DateTime:
            case TypeCode.String:
            default:
                return false;
        }
    }

    public static string GetLabelValue(DataColumn col, DataRow row)
    {
        switch (Type.GetTypeCode(col.DataType))
        {
            case TypeCode.Int16:
            case TypeCode.UInt16:
            case TypeCode.Int32:
            case TypeCode.UInt32:
            case TypeCode.Int64:
            case TypeCode.UInt64:
            case TypeCode.Single:
                return row[col].ToString();

            case TypeCode.Double:
            case TypeCode.Decimal:
                return @row[col].ToString();// "'" + (Convert.ToDouble(@row[col].ToString()).ToString("C")) + "'";

            case TypeCode.Boolean:
                return (Convert.ToBoolean(@row[col]) ? "Yes" : "No");

            case TypeCode.DateTime:
                try
                {
                    return "'" + @Convert.ToDateTime(@row[col]).ToShortDateString() + "'";
                }
                catch
                {
                    return "'" + @row[col] + "'";
                }

            case TypeCode.String:
            default:
                return "'" + @row[col].ToString().Replace("'", "") + "'";
        }
    }

}

@{
    int[] Totals = new int[@Model.ReportData.Columns.Count + 1];
    var dt = @Model.ReportData;
}

@if (Model.ReportType == "Bar" || Model.ReportType == "Pie" || Model.ReportType == "Line")
{
    <div id="chart-div-@Model.ReportId" style="height: @(Model.IsDashboard?"400px":"500px");"></div>
}
@if (Model.ReportType == "List" || Model.ReportType == "Summary" || Model.ShowDataWithGraph)
{
    <table id="reportTable-@Model.ReportId" class="table @*table-no-bordered*@"
           data-toggle="table"
           data-pagination="true"
           data-search="true"
           data-page-size="25"
           data-height="@(Model.IsDashboard?"350":"625")">
        <thead>
            <tr>
                @foreach (DataColumn col in dt.Columns)
                {
                    <th data-field="@col.ColumnName.Replace(" ","_")" data-sortable="true" class="@(IsNumericType(col) ? "right-align" : "")">@col.ColumnName</th>
                }
            </tr>
        </thead>
        @{int i = 0;}
        <tbody>
            @foreach (DataRow row in dt.Rows)
            {
                <tr>
                    @{i = 0;}

                    @foreach (DataColumn col in dt.Columns)
                    {
                        <td class="@(IsNumericType(col) ? "right-align" : "")">

                            @if (@row[col] != null)
                            {
                                switch (Type.GetTypeCode(col.DataType))
                                {
                                    case TypeCode.Int16:
                                    case TypeCode.UInt16:
                                    case TypeCode.Int32:
                                    case TypeCode.UInt32:
                                    case TypeCode.Int64:
                                    case TypeCode.UInt64:
                                    case TypeCode.Single:
                                        @row[col].ToString()
                                        break;

                                    case TypeCode.Double:
                                    case TypeCode.Decimal:
                                    @(Convert.ToDouble(@row[col].ToString()).ToString("C"))
                                        break;

                                    case TypeCode.Boolean:
                                    @(Convert.ToBoolean(@row[col]) ? "Yes" : "No")
                                        break;

                                    case TypeCode.DateTime:
                                        try
                                        {
                                            @Convert.ToDateTime(@row[col]).ToShortDateString()
                                        }
                                        catch
                                        {
                                            @row[col]
                                        }
                                        break;
                                    case TypeCode.String:
                                    default:
                                        if (row[col].ToString() == "System.Byte[]")
                                        {

                                            <img src="data:image/png;base64,@Convert.ToBase64String((byte[])row[col],0, ((byte[])row[col]).Length)" style="max-width: 200px;" />
                                        }
                                        else
                                        {
                                            @row[col].ToString()
                                        }
                                        break;
                                }
                            }
                        </td>


                            if (col.DataType == typeof(int) || col.DataType == typeof(double) || col.DataType == typeof(decimal))
                            {
                                Totals[i] += Convert.ToInt32(row[col]);
                            }
                            i += 1;


                    }
                </tr>
            }
        </tbody>
        @if (@Model.IncludeSubTotals)
        {
            <tfoot>
                <tr>

                    @for (i = 0; i <= dt.Columns.Count - 1; i++)
                    {
                        if (dt.Columns[i].ColumnName.ToLower().Contains("id") == false && Totals[i] > 0)
                        {
                            <td class="subtotal">@Totals[i].ToString()</td>
                        }
                        else
                        {
                            <td class="subtotal"></td>
                        }

                    }

                </tr>
            </tfoot>
        }

    </table>
}

